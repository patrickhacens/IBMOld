// <auto-generated />
using IBMYoung.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace IBMYoung.Migrations
{
    [DbContext(typeof(ProjectContext))]
    partial class ProjectContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.1-rtm-125")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("IBMYoung.Model.Alternativa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Correta");

                    b.Property<int>("QuestaoId");

                    b.Property<string>("TextoAlternativa");

                    b.HasKey("Id");

                    b.HasIndex("QuestaoId");

                    b.ToTable("Alternativas");
                });

            modelBuilder.Entity("IBMYoung.Model.Aprendiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataEntrada");

                    b.Property<DateTime>("DataSaida");

                    b.Property<int>("InstituicaoId");

                    b.Property<int>("Nivel");

                    b.Property<string>("Nome");

                    b.Property<string>("Sobrenome");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("InstituicaoId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Aprendizes");
                });

            modelBuilder.Entity("IBMYoung.Model.Boletim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AnoReferencia");

                    b.Property<int?>("AprendizId");

                    b.Property<DateTime>("DataCadastro");

                    b.Property<float>("Frequencia");

                    b.Property<string>("MesReferencia");

                    b.Property<float>("Nota");

                    b.Property<string>("Observacao");

                    b.HasKey("Id");

                    b.HasIndex("AprendizId");

                    b.ToTable("Boletins");
                });

            modelBuilder.Entity("IBMYoung.Model.Funcionario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Funcionarios");
                });

            modelBuilder.Entity("IBMYoung.Model.Instituicao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Instituicoes");
                });

            modelBuilder.Entity("IBMYoung.Model.Questao", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Conteudo");

                    b.Property<int>("TarefaId");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.HasIndex("TarefaId");

                    b.ToTable("Questoes");
                });

            modelBuilder.Entity("IBMYoung.Model.Replica", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("Texto");

                    b.Property<int>("TopicoId");

                    b.HasKey("Id");

                    b.HasIndex("TopicoId");

                    b.ToTable("Replicas");
                });

            modelBuilder.Entity("IBMYoung.Model.Tarefa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int?>("AprendizId");

                    b.Property<string>("Conteudo");

                    b.Property<DateTime>("DataCriacao");

                    b.Property<DateTime>("DataExclusao");

                    b.Property<bool>("Entregavel");

                    b.Property<bool>("MultiEscolha");

                    b.Property<int>("Nivel");

                    b.Property<string>("Titulo");

                    b.Property<int>("UsuarioId");

                    b.HasKey("Id");

                    b.HasIndex("AprendizId");

                    b.HasIndex("UsuarioId");

                    b.ToTable("Tarefas");
                });

            modelBuilder.Entity("IBMYoung.Model.Topico", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime>("DataCriacao");

                    b.Property<string>("Texto");

                    b.Property<string>("Titulo");

                    b.HasKey("Id");

                    b.ToTable("Topicos");
                });

            modelBuilder.Entity("IBMYoung.Model.Usuario", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<string>("Password")
                        .IsRequired();

                    b.Property<string>("Tipo");

                    b.Property<string>("Username")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("IBMYoung.Model.Alternativa", b =>
                {
                    b.HasOne("IBMYoung.Model.Questao", "Questao")
                        .WithMany("Alternativas")
                        .HasForeignKey("QuestaoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IBMYoung.Model.Aprendiz", b =>
                {
                    b.HasOne("IBMYoung.Model.Instituicao", "Instituicao")
                        .WithMany("Aprendizes")
                        .HasForeignKey("InstituicaoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("IBMYoung.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IBMYoung.Model.Boletim", b =>
                {
                    b.HasOne("IBMYoung.Model.Aprendiz")
                        .WithMany("Boletins")
                        .HasForeignKey("AprendizId");
                });

            modelBuilder.Entity("IBMYoung.Model.Funcionario", b =>
                {
                    b.HasOne("IBMYoung.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IBMYoung.Model.Questao", b =>
                {
                    b.HasOne("IBMYoung.Model.Tarefa", "Tarefa")
                        .WithMany("Questoes")
                        .HasForeignKey("TarefaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IBMYoung.Model.Replica", b =>
                {
                    b.HasOne("IBMYoung.Model.Topico", "Topico")
                        .WithMany("Replicas")
                        .HasForeignKey("TopicoId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("IBMYoung.Model.Tarefa", b =>
                {
                    b.HasOne("IBMYoung.Model.Aprendiz")
                        .WithMany("Tarefas")
                        .HasForeignKey("AprendizId");

                    b.HasOne("IBMYoung.Model.Usuario", "Usuario")
                        .WithMany()
                        .HasForeignKey("UsuarioId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
